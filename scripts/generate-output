#!/bin/bash
set -e
# Runs commands on Forge projects used in the book, and records
# the commands and outputs into files that are easily
# includeable in the book.

# TODO: Ensure git is installed
# TODO: Ensure forge is installed
# TODO: Ensure cast is installed
# TODO: Ensure utils are installed (sed, mktemp)

export ETH_RPC_URL="${ETH_RPC_URL:=https://eth-mainnet.alchemyapi.io/v2/Lc7oIGYeL_QvInzI0Wiu_pOZZDEKBrdf}"
export OUTPUT_DIR=$(realpath src/output)

# Runs a command and outputs text with anchors.
# The anchors are:
# - all: The command and output
# - command: Only the command
# - output: Only the output
run_command() {
  echo "// ANCHOR: all"
  echo "// ANCHOR: command"
  echo "$ $@"
  echo "// ANCHOR_END: command"
  echo "// ANCHOR: output"
  $@ | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g"
  echo "// ANCHOR_END: output"
  echo "// ANCHOR_END: all"
}

# Moves to a project directory and does some initial preparations.
#
# The project must live in ./projects
in_project() {
  echo "... $1"
  mkdir -p $OUTPUT_DIR/$1
  cd projects/$1
  forge clean
}

# Moves to a new temporary directory for a specific project,
# and ensures src/output/<PROJECT> exists.
in_temp() {
  echo "... $1"
  cd $(mktemp -d)
  mkdir -p $OUTPUT_DIR/$1
}

rm -rf src/output

echo "Generating output (forge)..."
(
  in_temp hello_foundry
  (run_command forge init hello_foundry) > $OUTPUT_DIR/hello_foundry/forge-init
  cd hello_foundry
  (run_command tree . -d -L 1) > $OUTPUT_DIR/hello_foundry/tree
  (run_command tree . -L 3 -I output) > $OUTPUT_DIR/hello_foundry/tree-with-files
  (run_command forge build) > $OUTPUT_DIR/hello_foundry/forge-build
  (run_command forge test) > $OUTPUT_DIR/hello_foundry/forge-test
)
(
  in_temp forge-std
  git clone https://github.com/brockelmore/forge-std
  cd forge-std
  (run_command forge install) > $OUTPUT_DIR/forge-std/forge-install
  (run_command forge build) > $OUTPUT_DIR/forge-std/forge-build
  (run_command forge test) > $OUTPUT_DIR/forge-std/forge-test
)
(
  in_temp deps
  forge init deps
  cd deps
  (run_command forge install Rari-Capital/solmate) > $OUTPUT_DIR/deps/forge-install
  forge install d-xo/weird-erc20
  (run_command tree lib -L 1) > $OUTPUT_DIR/deps/tree
  (run_command forge remappings) > $OUTPUT_DIR/deps/forge-remappings
)
(
  in_project test_filters
  (
    run_command forge test --match-contract ComplicatedContractTest --match-test testDeposit
  ) > $OUTPUT_DIR/test_filters/forge-test-match-contract-and-test
  (run_command forge test --match-path src/test/ContractB.t.sol) > $OUTPUT_DIR/test_filters/forge-test-match-path
)
(
  in_project cheatcodes
  (run_command forge test --match-test testIncrementAsOwner) > $OUTPUT_DIR/cheatcodes/forge-test-simple
  (
    run_command forge test --match-test "testIncrementAsOwner|testFailIncrementAsNotOwner" --match-path src/test/OwnerUpOnly.t.sol
  ) > $OUTPUT_DIR/cheatcodes/forge-test-cheatcodes
  (
    run_command forge test -vvvv --match-test testFailIncrementAsNotOwner --match-path src/test/OwnerUpOnly.t.sol
  ) > $OUTPUT_DIR/cheatcodes/forge-test-cheatcodes-tracing
  (
    run_command forge test --match-test "testIncrementAsOwner|testIncrementAsNotOwner" --match-path src/test/OwnerUpOnly.t.sol
  ) > $OUTPUT_DIR/cheatcodes/forge-test-cheatcodes-expectrevert
)
(
  in_temp nft_tutorial
  git clone https://github.com/FredCoen/nft-tutorial
  cd nft-tutorial
  forge install
  (run_command forge test) > $OUTPUT_DIR/nft_tutorial/forge-test
)
echo OK.
echo "Generating output (cast)..."
mkdir -p $OUTPUT_DIR/cast
(
  run_command cast call 0x6b175474e89094c44da98b954eedeac495271d0f "totalSupply()(uint256)" --rpc-url $ETH_RPC_URL
) > $OUTPUT_DIR/cast/cast-call
(
  run_command cast 4byte-decode 0x1F1F897F676d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e7
) > $OUTPUT_DIR/cast/cast-4byte-decode
echo OK.
