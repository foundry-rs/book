// SPDX-License-Identifier: UNLICENSED
// [!region all]
pragma solidity 0.8.10;

import {Test} from "forge-std/Test.sol";

contract Safe {
    receive() external payable {}

    function withdraw() external {
        payable(msg.sender).call{value: address(this).balance}("");
    }
}

contract SafeTest is Test {
    Safe safe;

    // Needed so the test contract itself can receive ether
    // when withdrawing
    receive() external payable {}

    function setUp() public {
        safe = new Safe();
    }

    // [!region signature]
    function testFuzz_Withdraw(uint96 amount) public {
<<<<<<< HEAD:projects/fuzz_testing/test/Safe.t.sol.3
    // ANCHOR_END: signature
        payable(address(safe)).call{value: amount}("");
=======
    // [!endregion signature]
        payable(address(safe)).transfer(amount);
>>>>>>> ac5e906:vocs/docs/snippets/projects/fuzz_testing/test/Safe.t.sol.3
        uint256 preBalance = address(this).balance;
        safe.withdraw();
        uint256 postBalance = address(this).balance;
        assertEq(preBalance + amount, postBalance);
    }
}
// [!endregion all]
